# Configuration for the feudalAdapter (formally known as ldf_adapter)

[ldf_adapter]

### backend 
# The Backend to use. Currently supported:
#  - local_unix
#  - bwidm
#  - ldap
backend = local_unix

### backend_supports_preferring_existing_user -- default: False
# In case the backend can detect a username issued to a federated
# identifier, setting this to "True" will overwrite the incoming
# preferred_username. 
#backend_supports_preferring_existing_user = False

### primary_grup
# Specify a primary group. If unset the user may be prompted to choose
# one, in case more than one are available
#
#primary_group = mytestcollab

### fallback_group
# Specify a group that is chosen, if the user does not come in without any
# group.
# NOTE: This may not be intended, because groups usually reflect the
# authorisation!
fallback_group = nogroup

### interactive  --  default: false
# If true, user may be asked to choose a primary group or to
# specify a different username.
# If false, and not primary_group is specified in the config, the first
# available group will be chosen.
#
#interactive = false

[messages]
####################
### Messages section
# Here we select which information will be logged

### log_file -- default: /var/log/feudal/adapter.log
log_file = /tmp/feudal.log

### log_level -- default: WARNING
# INFO will show a few lines inidicating changes to users and groups
log_level = INFO

### log_to_console -- default: only when environment variable $LOG is set
# If set to False: don't log to console, even if $LOG is set.
# If set to True: log to console, regardless of $LOG.
#log_to_console = True

### log_name_changes  --  default: yes
# names (of users, groups, issuers, ...) will be changed to conform to
# requirements we found with BWIDM. This is basically standard unix and
# string requirements.
# If set to yes, the name changes will be logged as warnings
log_name_changes = no

### log_primary_group_definition -- default: yes
# If no primary_group configured, and if the user has more than one group,
# we have to pick one group as the primary one. We currently cannot even
# guarantee this will be the same for each deployment
log_primary_group_definition = no

### log_username_creation -- default: no
# When the preferred_username cannot be used, feudalAdapter will try a
# couple of names. If set to yes, we will log all the names that will be
# tried
log_username_creation = no


[assurance]
#####################
### Assurance Section 
# here we configure the assurance requirements that users must fulfill

### prefix 
# The common prefix of the assurance claims used.
# This is prepended to every value that does not start with 'http[s]://'
#
prefix = https://refeds.org/assurance/

### require
# Specify the required assurance of a user to be let into the system.
# This can be an arbitrarly complex boolean expression of claims that need to be
# satisfied.
# Supported operatiors are:
# - '&' logical and
# - '|' logical or
# - '(' and ')' for parenthesis.
# Each terminal is a string(-suffix), which might be contained in the users
# eduperson_assurance.
# Special terminals are:
# - '+' any claim
# - '*' always satisfied.
#
# Examples for the REFEDS Assurance Framework: (for reference and details see https://refeds.org/assurance)
# require = profile/espresso   -> Require that all users have the espresso profile
# require = *                  -> Allow any user, regargdless of their assurance
# require = +                  -> Allow any user, as long as they have an assurance claim
# require = profile/espresso |                   -> Photo-ID was verified against an up-to-date goverment database
#    IAP/medium &                               -> Photo-ID was verified by a trained professional
#           ID/eppn-unique-no-reassign |           AND the eppn is unique and won't be reassigned
#    IAP/low                                    -> User has an account at a university
#           ID/eppn-unique-no-reassign |           AND the eppn is unique and won't be reassigned
#    https://aai.egi.eu/LoA#Substantial |       -> Photo-ID was verified by a trained professional
#    profile/cappuccino                         -> Photo-ID was verified by a trained professional
#                                                  AND the eppn is unique and won't be reassigned
require = profile/espresso |
    IAP/medium & ID/eppn-unique-no-reassign |
    IAP/low & ID/eppn-unique-no-reassign |
    https://aai.egi.eu/LoA#Substantial |
    profile/cappuccino

### verified_undeploy  --  default: false
# Block undeployment for disallowed users. Useful to forbid a user removing an
# account after he lost authorisation for the service
#verified_undeploy = False

### skip  --  default: no
# Skip assurance checking and assume assurance is sufficient.
# USE WITH CARE AND ONLY IF YOU KNOW WHAT YOU ARE DOING!!!
skip = Yes, do as I say!

###################################
### Username Generator
#
# The Username Generator is only used when ldf_adapter.interactive is
# false.  This is because with ldf_adapter.interactive users can specify
# their own username.
#
# Username Generateor configures the way in which usernames are generated
# The name generator has different modes, each of which may require
# Additional configuration

[username_generator]

### mode  --  default: friendly
# These modes are currently available: 

# - friendly: Friendly implements a list of strategies that are tried one
#             after another. The input is based on different claims of the
#             incoming userinfo object:
#             - preferred_username claim (if present)
#             - combine a varying number of letters of given_name + family_name
#             - email-address if all else fails
# - pooled:   Pooled implements the pool-account behaviour known from "the grid"
#             I.e. we use the primary group name and append the digits, in the
#             order of incoming users.
#             Unfortunately, with OIDC group names may be much longer.
#             Therefore, a specific prefix may be configured.
#
#mode = friendly
mode = pooled

### pool_prefx  --  default: primary group name of the user
#pool_prefix = pool

### pool_digits  --  default: 3
# The number of digits to use
#pool_digits = 2

### strip_sub_groups  --  default: no
# Federated group names may be unique, which can make them very long,
# while POSIX only allows 32 characters. We are truncating groups. 
# Example:
#   This entitlement: urn:mace:egi.eu:group:eosc-synergy.eu:admins:role=member#aai.egi.eu
#      is mapped to : egi-eu_..-eosc-synergy-eu_admins
# As you can see, subgroups are used to form the POSIX group name.
# The strip_sub_groups can help, but you will loose the information about
# the subgroups.
# Use with care
#strip_sub_groups = no

###################################
### Backend specific configuration.
# You can find available backends in the
# feudalAdapter/ldf_adapter/backends folder.
#
# Each backend may have multiple sections.

[backend.local_unix]
# Configuration for the local_unix backend

### shell  --  default: /bin/sh
# The unix shell to use
shell = /bin/bash

# deploy_user_ssh_keys -- default: yes
# Allows using ssh keys, when they are found in the deployment request
deploy_user_ssh_keys = no

[backend.local_unix.login_info]
# Static information displayed to the user when deployed to a service.
# Each key and value field will be shown to the user in the "Credentials"
# screen.
# ssh_host and ssh_user are usually filled by the backend
#
Description = Local SSH Test Service
login_help = Login via `mccli ssh {login_host}`.
ssh_host = localhost
