
# Automatically added by dh_python2:
# dh-virtualenv postinst autoscript
set -e
dh_venv_install_dir='/opt/venvs/motley-cue'
dh_venv_package='motley-cue'

# set to empty to enable verbose output
test "${DH_VERBOSE:-0}" = "1" && DH_VENV_DEBUG="" || DH_VENV_DEBUG=:
$DH_VENV_DEBUG set -x


dh_venv_safe_interpreter_update() {
    # get Python version used
    local pythonX_Y=$(cd "$dh_venv_install_dir/lib" && ls -1d python[2-9].*[0-9] | tail -n1)

    local i
    for i in python ${pythonX_Y%.*} ${pythonX_Y}; do
        local interpreter_path="$dh_venv_install_dir/bin/$i"

        # skip any symlinks, and make sure we have an existing target
        test ! -L "$interpreter_path" || continue
        test -x "$interpreter_path" || continue

        # skip if already identical
        if cmp "/usr/bin/$pythonX_Y" "$interpreter_path" >/dev/null 2>&1; then
            continue
        fi

        # hardlink or copy new interpreter
        cp -fpl "/usr/bin/$pythonX_Y" "$interpreter_path,new" \
            || cp -fp "/usr/bin/$pythonX_Y" "$interpreter_path,new" \
            || rm -f "$interpreter_path,new" \
            || true

        # make a backup (once)
        test -f "$interpreter_path,orig" || ln  "$interpreter_path" "$interpreter_path,orig"

        # atomic move
        if test -x "$interpreter_path,new" && mv "$interpreter_path,new" "$interpreter_path"; then
            echo "Successfully updated $interpreter_path"
        else
            echo >&2 "WARNING: Some error occured while updating $interpreter_path"
        fi
    done
}

dh_venv_safe_lib_symlinks_update() {
    cd $dh_venv_install_dir/lib
    PKG_PYTHONDIR=""
    PYTHON3_MAJOR=`python3 --version| cut -d\  -f 2 | cut -d\. -f 1`
    PYTHON3_MINOR=`python3 --version| cut -d\  -f 2 | cut -d\. -f 2`
    for i in `seq 1 12`; do
        PYTHONDIR="python3.${i}"
        test -e $PYTHONDIR && {
            test -L $PYTHONDIR || {
                # If it exists but is not a symlink, then we found the
                # Python dir for the version this package was created for
                PKG_PYTHONDIR=$PYTHONDIR
                #echo "PKG_PYTHONDIR: $PKG_PYTHONDIR"
            }
        }
    done
    test -z $PKG_PYTHONDIR && {
        echo "Can not find python package dir"
        exit 44
    }
    echo "Package was packed for $PKG_PYTHONDIR adjusting symlinks for
    installed python${PYTHON3_MAJOR}.${PYTHON3_MINOR}"

    ln -s $PKG_PYTHONDIR python${PYTHON3_MAJOR}.${PYTHON3_MINOR} 
}


case "$1" in
    configure|reconfigure)
        $DH_VENV_DEBUG echo "$0 $1 called with $# args:" "$@"
        dh_venv_safe_interpreter_update
        dh_venv_safe_lib_symlinks_update
        ;;

    triggered)
        $DH_VENV_DEBUG echo "$0 $1 called with $# args:" "$@"
        for trigger in $2; do
            case "$trigger" in
                /usr/bin/python?.*)
                    # this trigger might be for the "wrong" interpreter (other version),
                    # but the "cmp" in "dh_venv_safe_interpreter_update" and the fact we only
                    # ever look at our own Python version catches that
                    dh_venv_safe_interpreter_update
                    ;;
                dh-virtualenv-interpreter-update)
                    dh_venv_safe_interpreter_update
                    ;;
                *)
                    #echo >&2 "ERROR:" $(basename "$0") "called with unknown trigger '$2'"
                    #exit 1
                    ;;
            esac
        done
        ;;

    abort-upgrade|abort-remove|abort-deconfigure)
        ;;

    *)
        #echo >&2 "ERROR:" $(basename "$0") "called with unknown argument '$1'"
        #exit 1
        ;;
esac

$DH_VENV_DEBUG set +x
# END dh-virtualenv postinst autoscript

# End automatically added section
