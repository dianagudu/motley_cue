# Configuration for the feudalAdapter (formally known as ldf_adapter)

[ldf_adapter]

# backend
# The Backend to use. Currently supported:
#  - local_unix
#  - bwidm
#  - ldap
backend = local_unix

# primary_grup
# Specify a primary group. If unset the user may be prompted to choose
# one, in case more than one are available
#
#primary_group = mytestcollab

# interactive  --  default: false
# If true, user may be asked to choose a primary group or to
# specify a different username.
# If false, and not primary_group is specified in the config, the first
# available group will be chosen.
#
#interactive = false

[messages]
####################
# Messages section
# Here we select which information will be logged

# log_name_changes  --  default: yes
# names (of users, groups, issuers, ...) will be changed to conform to
# requirements we found with BWIDM. This is basically standard unix and
# string requirements.
# If set to yes, the name changes will be logged as warnings
log_name_changes = no

# log_primary_group_definition -- default: yes
# If no primary_group configured, and if the user has more than one group,
# we have to pick one group as the primary one. We currently cannot even
# guarantee this will be the same for each deployment
log_primary_group_definition = no

# log_username_creation -- default: no
# When the preferred_username cannot be used, feudalAdapter will try a
# couple of names. If set to yes, we will log all the names that will be
# tried
log_username_creation = no


[assurance]
#####################
# Assurance Section
# here we configure the assurance requirements that users must fulfill

# prefix
# The common prefix of the assurance claims used.
# This is prepended to every value that does not start with 'http[s]://'
#
prefix = https: // refeds.org/assurance/

# require
# Specify the required assurance of a user to be let into the system.
# This can be an arbitrarly complex boolean expression of claims that need to be
# satisfied.
# Supported operatiors are:
# - '&' logical and
# - '|' logical or
# - '(' and ')' for parenthesis.
# Each terminal is a string(-suffix), which might be contained in the users
# eduperson_assurance.
# Special terminals are:
# - '+' any claim
# - '*' always satisfied.
#
# Examples for the REFEDS Assurance Framework: (for reference and details see https://refeds.org/assurance)
# require = profile/espresso   -> Require that all users have the espresso profile
# require = *                  -> Allow any user, regargdless of their assurance
# require = +                  -> Allow any user, as long as they have an assurance claim
# require = profile/espresso |                   -> Photo-ID was verified against an up-to-date goverment database
#    IAP/medium &                               -> Photo-ID was verified by a trained professional
#           ID/eppn-unique-no-reassign |           AND the eppn is unique and won't be reassigned
#    IAP/low                                    -> User has an account at a university
#           ID/eppn-unique-no-reassign |           AND the eppn is unique and won't be reassigned
#    https://aai.egi.eu/LoA#Substantial |       -> Photo-ID was verified by a trained professional
#    profile/cappuccino                         -> Photo-ID was verified by a trained professional
#                                                  AND the eppn is unique and won't be reassigned
require = profile/espresso |
    IAP/medium & ID/eppn-unique-no-reassign |
    IAP/low & ID/eppn-unique-no-reassign |
    https: // aai.egi.eu/LoA  # Substantial |
    profile/cappuccino

# verified_undeploy  --  default: false
# Block undeployment for disallowed users. Useful to forbid a user removing an
# account after he lost authorisation for the service
#verified_undeploy = False

# skip  --  default: no
# Skip assurance checking and assume assurance is sufficient.
# USE WITH CARE AND ONLY IF YOU KNOW WHAT YOU ARE DOING!!!
skip = Yes, do as I say!


###################################
# Backend specific configuration.
# You can find available backends in the
# feudalAdapter/ldf_adapter/backends folder.
#
# Each backend may have multiple sections.

####################
[backend.local_unix]
####################
# Configuration for the local_unix backend

# shell  --  default: /bin/sh
# The unix shell to use
shell = /bin/bash

[backend.local_unix.login_info]
# Static information displayed to the user when deployed to a service.
# Each key and value field will be shown to the user in the "Credentials"
# screen.
# ssh_host and ssh_user are usually filled by the backend
#
Description = Local SSH Test Service
login_help = Login via `ssh {login_name}@{login_host}` using one of your deployed keys.
ssh_host = localhost

####################
[backend.bwidm]
####################
# Configuration for the bwidm backend

# url
# The base URL of the bwidm API
url = https: // bwidm-test.scc.kit.edu/rest

# org_id
# The ID for bwidm. This is used for prefixing user- and group names
org_id = ldf

[backend.bwidm.auth]
# HTTP basic auth to connect to BWIDM API
http_user = foo
http_pass = bar

[backend.bwidm.service]
# The name of the service the user should be added to on BWIDM:
name = sshtest

[backend.bwidm.login_info]
# Static information displayed to the user when deployed to a service.
# Each key and value field will be shown to the user in the "Credentials"
# screen.
# ssh_host and ssh_user are usually filled by the backend
#
description = SSH Test Service
ssh_host = hdf-login.lsdf.kit.edu
ssh_host_alternative = hdf-ssh.data.kit.edu

